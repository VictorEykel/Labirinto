package models;

import maze.Maze;
import java.util.*;
import java.util.concurrent.locks.ReentrantLock;

public class Mouse implements Runnable {
    // Atributos protegidos por sincroniza√ß√£o
    protected volatile int x, y;
    protected volatile int id;
    protected volatile String symbol;
    protected volatile boolean hasReachedEnd = false;
    protected volatile boolean isRunning = true;

    // Atributos que precisam de sincroniza√ß√£o mais complexa
    private Maze maze;
    private Set<String> visitedPositions = Collections.synchronizedSet(new HashSet<>());
    private Stack<int[]> pathStack = new Stack<>();
    private Random random = new Random();
    private volatile int stuckCounter = 0;
    private static final int MAX_STUCK_ATTEMPTS = 5;
    private int velocityMs;

    // Locks para opera√ß√µes cr√≠ticas
    private final ReentrantLock movementLock = new ReentrantLock();
    private final ReentrantLock pathLock = new ReentrantLock();

    public Mouse(int id, Maze maze, int velocityMs) {
        this.id = id;
        this.maze = maze;
        this.velocityMs = velocityMs;
        // S√≠mbolos diferentes para cada rato
        String[] symbols = {"@", "‚ô¶", "‚ô£", "‚ô†", "‚ô•", "‚óÜ", "‚óá", "‚òÖ", "‚òÜ", "‚óè"};
        this.symbol = symbols[id % symbols.length];
        setInitialPosition();
    }

    /**
     * Define uma posi√ß√£o inicial v√°lida para este rato (thread-safe)
     */
    private void setInitialPosition() {
        movementLock.lock();
        try {
            List<int[]> validPositions = new ArrayList<>();

            // Encontra todas as posi√ß√µes v√°lidas
            for (int row = 1; row < maze.getHeight() - 1; row++) {
                for (int col = 1; col < maze.getWidth() - 1; col++) {
                    if (maze.isValidPosition(col, row) &&
                            !maze.isEndPosition(col, row) &&
                            !maze.isPositionOccupied(col, row, this.id)) {
                        validPositions.add(new int[]{col, row});
                    }
                }
            }

            if (!validPositions.isEmpty()) {
                int randomIndex = random.nextInt(validPositions.size());
                int[] position = validPositions.get(randomIndex);
                this.x = position[0];
                this.y = position[1];
                System.out.println("üê≠ Rato " + id + " (" + symbol + ") iniciou em: (" + x + ", " + y + ")");
            } else {
                // Posi√ß√£o padr√£o se n√£o encontrar espa√ßo
                this.x = 1;
                this.y = 1;
                System.out.println("‚ö†Ô∏è Rato " + id + " usando posi√ß√£o padr√£o (1,1)");
            }
        } finally {
            movementLock.unlock();
        }
    }

    /**
     * M√©todo principal da thread - executa o movimento cont√≠nuo do rato
     */
    @Override
    public void run() {
        while (isRunning && !Thread.currentThread().isInterrupted()) {
            try {
                // Se chegou ao destino, para de se mover mas n√£o reinicia
                if (hasReachedEnd) {
                    System.out.println("üéØ Rato " + id + " permanece no destino!");
                    Thread.sleep(5000); // Espera 5 segundos antes de verificar novamente
                    continue;
                }

                // Tenta mover o rato
                boolean moved = move();

                if (!moved) {
                    // Se n√£o conseguiu se mover, tenta estrat√©gias de recupera√ß√£o
                    handleStuckSituation();
                }

                // Pausa entre movimentos com pequena varia√ß√£o
                int variation = random.nextInt(velocityMs / 4);
                Thread.sleep(velocityMs + variation - (velocityMs / 8));

            } catch (InterruptedException e) {
                System.out.println("üõë Thread do rato " + id + " foi interrompida");
                Thread.currentThread().interrupt();
                break;
            } catch (Exception e) {
                System.err.println("‚ùå Erro na thread do rato " + id + ": " + e.getMessage());
            }
        }
    }

    /**
     * Move o rato um passo em dire√ß√£o ao objetivo (thread-safe)
     */
    public boolean move() {
        if (hasReachedEnd) return false;

        movementLock.lock();
        try {
            // Verifica se chegou ao destino
            if (x == maze.getEndX() && y == maze.getEndY()) {
                hasReachedEnd = true;
                System.out.println("üéâ RATO " + id + " (" + symbol + ") CHEGOU AO DESTINO!");
                return true;
            }

            String currentPos = x + "," + y;

            // Adiciona posi√ß√£o atual ao hist√≥rico se √© nova
            if (!visitedPositions.contains(currentPos)) {
                visitedPositions.add(currentPos);
                pathLock.lock();
                try {
                    pathStack.push(new int[]{x, y});
                } finally {
                    pathLock.unlock();
                }
                stuckCounter = 0; // Reset contador quando encontra novo caminho
            }

            // Busca pr√≥ximo movimento
            int[] nextMove = findNextMove();

            if (nextMove != null) {
                x = nextMove[0];
                y = nextMove[1];
                stuckCounter = 0;
                return true;
            } else {
                stuckCounter++;
                // Se n√£o encontrou movimento, tenta backtracking
                return doBacktracking();
            }
        } finally {
            movementLock.unlock();
        }
    }

    /**
     * Lida com situa√ß√µes onde o rato est√° preso (thread-safe)
     */
    private boolean handleStuckSituation() {
        if (stuckCounter >= MAX_STUCK_ATTEMPTS) {
            System.out.println("üîÑ Rato " + id + " explorando nova rota...");

            // Estrat√©gia 1: Limpar parte do hist√≥rico
            if (clearPartialHistory()) {
                return true;
            }

            // Estrat√©gia 2: Mover para √°rea n√£o explorada
            if (moveToNearestUnexplored()) {
                return true;
            }

            // Estrat√©gia 3: Reset parcial do hist√≥rico
            resetPartialExploration();
            stuckCounter = 0;
        }
        return false;
    }

    /**
     * Limpa parte do hist√≥rico para permitir re-explora√ß√£o (thread-safe)
     */
    private boolean clearPartialHistory() {
        if (visitedPositions.size() <= 10) return false;

        // Remove 40% das posi√ß√µes mais antigas
        List<String> positionsList = new ArrayList<>(visitedPositions);
        int toRemove = Math.max(5, positionsList.size() * 2 / 5);

        for (int i = 0; i < toRemove && i < positionsList.size(); i++) {
            visitedPositions.remove(positionsList.get(i));
        }

        // Tenta encontrar movimento ap√≥s limpeza
        int[] nextMove = findNextMove();
        if (nextMove != null) {
            x = nextMove[0];
            y = nextMove[1];
            return true;
        }

        return false;
    }

    /**
     * Move o rato para a √°rea n√£o explorada mais pr√≥xima (thread-safe)
     */
    private boolean moveToNearestUnexplored() {
        List<int[]> unexploredPositions = new ArrayList<>();

        // Encontra posi√ß√µes v√°lidas n√£o visitadas
        for (int row = 1; row < maze.getHeight() - 1; row++) {
            for (int col = 1; col < maze.getWidth() - 1; col++) {
                String pos = col + "," + row;
                if (maze.isValidPosition(col, row) && !visitedPositions.contains(pos)) {
                    unexploredPositions.add(new int[]{col, row});
                }
            }
        }

        if (unexploredPositions.isEmpty()) return false;

        // Encontra a posi√ß√£o mais pr√≥xima
        int[] nearestPos = unexploredPositions.get(0);
        int minDistance = manhattanDistance(x, y, nearestPos[0], nearestPos[1]);

        for (int[] pos : unexploredPositions) {
            int distance = manhattanDistance(x, y, pos[0], pos[1]);
            if (distance < minDistance) {
                minDistance = distance;
                nearestPos = pos;
            }
        }

        // Move em dire√ß√£o √† posi√ß√£o mais pr√≥xima
        return moveTowardsTarget(nearestPos[0], nearestPos[1]);
    }

    /**
     * Move um passo em dire√ß√£o a uma posi√ß√£o alvo (thread-safe)
     */
    private boolean moveTowardsTarget(int targetX, int targetY) {
        int[][] directions = {{0, -1}, {0, 1}, {1, 0}, {-1, 0}};
        int[] bestMove = null;
        int bestDistance = Integer.MAX_VALUE;

        for (int[] dir : directions) {
            int newX = x + dir[0];
            int newY = y + dir[1];

            if (maze.isValidPosition(newX, newY) &&
                    !maze.isPositionOccupied(newX, newY, this.id)) {
                int distance = manhattanDistance(newX, newY, targetX, targetY);
                if (distance < bestDistance) {
                    bestDistance = distance;
                    bestMove = new int[]{newX, newY};
                }
            }
        }

        if (bestMove != null) {
            x = bestMove[0];
            y = bestMove[1];
            return true;
        }

        return false;
    }

    /**
     * Calcula dist√¢ncia Manhattan entre dois pontos
     */
    private int manhattanDistance(int x1, int y1, int x2, int y2) {
        return Math.abs(x1 - x2) + Math.abs(y1 - y2);
    }

    /**
     * Reset parcial do estado de explora√ß√£o (thread-safe)
     */
    private void resetPartialExploration() {
        pathLock.lock();
        try {
            // Mant√©m apenas as √∫ltimas 8 posi√ß√µes para evitar loops
            if (visitedPositions.size() > 8) {
                Set<String> recentPositions = Collections.synchronizedSet(new HashSet<>());
                Stack<int[]> tempStack = new Stack<>();

                // Preserva as 8 posi√ß√µes mais recentes
                int preserve = Math.min(8, pathStack.size());
                for (int i = 0; i < preserve; i++) {
                    int[] pos = pathStack.pop();
                    tempStack.push(pos);
                    recentPositions.add(pos[0] + "," + pos[1]);
                }

                // Restaura apenas as posi√ß√µes recentes
                pathStack.clear();
                visitedPositions.clear();
                while (!tempStack.isEmpty()) {
                    pathStack.push(tempStack.pop());
                }
                visitedPositions.addAll(recentPositions);
            }
        } finally {
            pathLock.unlock();
        }

        System.out.println("üîÑ Rato " + id + " resetou explora√ß√£o parcial");
    }

    /**
     * Encontra o pr√≥ximo movimento v√°lido usando heur√≠stica (thread-safe)
     */
    private int[] findNextMove() {
        int[][] directions = {{0, -1}, {0, 1}, {1, 0}, {-1, 0}};
        List<int[]> validMoves = new ArrayList<>();

        for (int[] dir : directions) {
            int newX = x + dir[0];
            int newY = y + dir[1];
            String newPos = newX + "," + newY;

            if (maze.isValidPosition(newX, newY) &&
                    !visitedPositions.contains(newPos) &&
                    !maze.isPositionOccupied(newX, newY, this.id)) {
                validMoves.add(new int[]{newX, newY});
            }
        }

        if (!validMoves.isEmpty()) {
            // Ordena por dist√¢ncia at√© o destino (heur√≠stica A*)
            validMoves.sort((pos1, pos2) -> {
                int dist1 = manhattanDistance(pos1[0], pos1[1], maze.getEndX(), maze.getEndY());
                int dist2 = manhattanDistance(pos2[0], pos2[1], maze.getEndX(), maze.getEndY());
                return Integer.compare(dist1, dist2);
            });

            // Adiciona aleatoriedade aos 2 melhores movimentos
            int choiceRange = Math.min(2, validMoves.size());
            return validMoves.get(random.nextInt(choiceRange));
        }

        return null;
    }

    /**
     * Implementa backtracking inteligente (thread-safe)
     */
    private boolean doBacktracking() {
        pathLock.lock();
        try {
            if (pathStack.isEmpty()) return false;

            // Remove posi√ß√£o atual do stack
            if (!pathStack.isEmpty()) {
                pathStack.pop();
            }

            // Procura posi√ß√£o anterior com movimentos v√°lidos
            while (!pathStack.isEmpty()) {
                int[] backPos = pathStack.peek();
                int backX = backPos[0];
                int backY = backPos[1];

                // Verifica se h√° movimentos n√£o explorados
                int[][] directions = {{0, -1}, {0, 1}, {1, 0}, {-1, 0}};
                for (int[] dir : directions) {
                    int checkX = backX + dir[0];
                    int checkY = backY + dir[1];
                    String checkPos = checkX + "," + checkY;

                    if (maze.isValidPosition(checkX, checkY) &&
                            !visitedPositions.contains(checkPos) &&
                            !maze.isPositionOccupied(checkX, checkY, this.id)) {
                        x = backX;
                        y = backY;
                        return true;
                    }
                }
                pathStack.pop();
            }

            return false;
        } finally {
            pathLock.unlock();
        }
    }

    /**
     * Para a execu√ß√£o desta thread
     */
    public void stop() {
        isRunning = false;
    }

    // Getters thread-safe
    public int getX() { return x; }
    public int getY() { return y; }
    public int getId() { return id; }
    public String getSymbol() { return symbol; }
    public boolean hasReachedEnd() { return hasReachedEnd; }
}